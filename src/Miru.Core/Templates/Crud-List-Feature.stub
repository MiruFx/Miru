namespace {{ Solution.Name }}.Features.{{ input.In }};

public class {{ input.Name }}{{ input.Action }}
{
    public class Query : IRequest<Result>
    {
    }

    public class Result
    {    
        public IReadOnly{{ input.Action }}<{{ input.Name }}View> {{ input.In }} { get; set; } = new {{ input.Action }}<{{ input.Name }}View>();
    }

    public class {{ input.Name }}View
    {
        public long Id { get; set; }
        public string Name { get; set; }
    }

    public class Handler : IRequestHandler<Query, Result>
    {
        private readonly AppDbContext _db;
            
        public Handler(AppDbContext db)
        {
            _db = db;
        }
            
        public async Task<Result> Handle(Query request, CancellationToken ct)
        {
            return new Result
            {
                {{ input.In }} = new {{ input.Action }}<{{ input.Name }}View>()
                // {{ input.In }} = await _db.{{ input.In }}
                //     .Select(m => new {{ input.Name }}View
                //     {
                //         Id = m.Id,
                //         Name = m.Name
                //     })
                //     .To{{ input.Action }}Async(ct)
            };
        }
    }
        
    public class Controller : MiruController
    {
        [HttpGet("/{{ input.In }}")]
        public async Task<Result> {{ input.Action }}(Query request) => await SendAsync(request);
    }
}
