using System.Threading;
using System.Threading.Tasks;
using {{ Solution.Name }}.Database;
using {{ Solution.Name }}.Domain;
using MediatR;
using Microsoft.AspNetCore.Mvc;
using Miru;
using Miru.Mvc;

namespace {{ Solution.Name }}.Features.{{ input.In }}
{
    public class {{ input.Name }}{{ input.Action }}
    {
        public class Query : IRequest<Result>
        {
            public long Id { get; set; }
        }

        public class Result
        {
            public {{ input.Name }} {{ input.Name }} { get; set; }
        }

        public class Handler : IRequestHandler<Query, Result>
        {
            private readonly {{ Solution.ShortName }}DbContext _db;
            
            public Handler({{ Solution.ShortName }}DbContext db)
            {
                _db = db;
            }
            
            public async Task<Result> Handle(Query request, CancellationToken ct)
            {
                return new Result
                {
                    {{ input.Name }} = await _db.{{ input.In }}.ByIdOrFailAsync(request.Id, ct)
                };
            }
        }
        
        public class {{ input.In }}Controller : MiruController
        {
            [Route("/{{ input.In }}/{id:long}")]
            public async Task<Result> {{ input.Action }}(Query request) => await SendAsync(request);
        }
    }
}
