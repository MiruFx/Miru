using Microsoft.AspNetCore.Identity;
using Miru.Userfy;

namespace {{ Solution.Name }}.Features.Accounts;

public class AccountRegister
{
    public class Query : IRequest<Command>
    {
        public string ReturnUrl { get; set; }
    }
        
    public class Command : IRequest<Result>
    {
        public string Email { get; set; }
        public string Password { get; set; }
        public string PasswordConfirmation { get; set; }
            
        public string ReturnUrl { get; set; }
    }

    public class Result : IRedirect
    {
        public IdentityResult IdentityResult { get; set; }
        public object RedirectTo { get; set; }
    }
        
    public class Handler :
        IRequestHandler<Query, Command>,
        IRequestHandler<Command, Result>
    {
        private readonly IUserSession _userSession;
        private readonly IUserRegister<User> _userRegister;
        private readonly IMailer _mailer;

        public Handler(
            IMailer mailer, 
            IUserSession userSession, 
            IUserRegister<User> userRegister)
        {
            _mailer = mailer;
            _userSession = userSession;
            _userRegister = userRegister;
        }

        public async Task<Command> Handle(Query request, CancellationToken ct)
        {
            return await Task.FromResult(new Command
            {
                ReturnUrl = request.ReturnUrl
            });
        }

        public async Task<Result> Handle(Command request, CancellationToken ct)
        {
            request.ReturnUrl ??= "/";

            var user = new User();

            var result = await _userRegister
                .RegisterAsync(user, request.Email, request.Password, ct);

            if (result.Succeeded)
            {
                await _mailer.SendLaterAsync(new AccountRegisteredMail(user));

                await _userSession.LoginAsync(request.Email, request.Password);
            }
            else
            {
                result.ThrowDomainExceptionIfFailed();
            }

            return new Result
            {
                RedirectTo = request.ReturnUrl,
                IdentityResult = result
            };
        }
    }

    public class Validator : AbstractValidator<Command>
    {
        public Validator()
        {
            RuleFor(x => x.Email).NotEmpty().EmailAddress();

            RuleFor(x => x.Password).NotEmpty()
                .Equal(x => x.PasswordConfirmation)
                .WithMessage("The password and confirmation password do not match");
                
            RuleFor(x => x.PasswordConfirmation).NotEmpty();
        }
    }
        
    public class AccountsController : MiruController
    {
        [HttpGet("/Accounts/Register")]
        public async Task<Command> Register(Query request) => await SendAsync(request);
            
        [HttpPost("/Accounts/Register")]
        public async Task<Result> Register(Command request) => await SendAsync(request);
    }
}
